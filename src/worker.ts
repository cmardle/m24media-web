import type { SSRManifest } from 'astro';
import { App } from 'astro/app';

// This function is generated by Astro
export function createExports(manifest: SSRManifest) {
  const app = new App(manifest);

  return {
    default: {
      async fetch(request: Request, env: any, ctx: any) {
        const url = new URL(request.url);

        // Handle pv2 subdomain routing BEFORE any other processing
        if (url.hostname === 'pv2.m24media.com') {
          let newPath = url.pathname;

          // Handle root path
          if (newPath === '/' || newPath === '') {
            newPath = '/pv2/index.html';
          } else if (!newPath.startsWith('/pv2/')) {
            // Prepend /pv2/ to all other paths
            newPath = '/pv2' + newPath;
          }

          // Create new URL with rewritten path
          const rewrittenUrl = new URL(newPath + url.search, url.origin);

          // Create new request with rewritten URL
          const rewrittenRequest = new Request(rewrittenUrl.toString(), {
            method: request.method,
            headers: request.headers,
            body: request.body,
            redirect: request.redirect,
          });

          // Check if it's a static asset and serve it directly
          if (manifest.assets.has(newPath)) {
            return env.ASSETS.fetch(rewrittenUrl.toString());
          }

          // Otherwise pass to Astro app
          request = rewrittenRequest;
        }

        // Import and use the default Cloudflare adapter handler
        const { handle } = await import('@astrojs/cloudflare/handler');
        return handle(manifest, app, request, env, ctx);
      }
    }
  };
}
